# ~/.vim/UltiSnips/perl.snippets
priority 1

#print
snippet p "print"
print(${1:${VISUAL}})
endsnippet
snippet pb "print with brackets"
print("${1:${VISUAL}}")
endsnippet
snippet pf "printf"
print("%s %s" % ( ${1:str1}, ${2:str2}))
endsnippet

#data structure
snippet list "list"
${1:myList} = [${2:'Juice'}, ${3:'Tomatoes'}]
endsnippet
snippet tup "tuple"
${1:myTuple} = (${2:'Juice'}, ${3:'Tomatoes'})
endsnippet
snippet map "map"
${1:myMap} = {
	${2:'key1'} : ${3:'val1'},
	${4:'key2'} : ${5:'val2'}}
endsnippet
snippet str "string"
${1:myString} = "${2:string}"
endsnippet

snippet rand "random"
${1:myRandnum} = random.randrange(${2:0},${3:100})
endsnippet

snippet convtl "convert tuple to list"
${1:myList} = list(${2:myTuple})
endsnippet
snippet convlt "convert list to tuple"
${1:myList} = list(${2:myTuple})
endsnippet

snippet fori
for ${1:i} in range(${2:0},${3:3}):
	pass
endsnippet

#program begin
snippet temp "template"
#!/usr/bin/env python3

import random
import sys
import os


#snippets
endsnippet

#file handling
snippet openr "read file"
${1:myFile} = open(${2:"test.txt"}, "${3:r+}")
${4:textInFile} = $1.read()
$1.close()
endsnippet
snippet openw "write file"
${1:myFile} = open(${2:"test.txt"}, "${3:wb}")
$1.write(bytes(${4:"content\n"}, ${5:'UTF-8')})
$1.close()
endsnippet

#subroutine
snippet def "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	${5:${VISUAL:pass}}
endsnippet
snippet setg "setter getter"
def set_${1:var}(self, $1):
	self.__$1 = $1

def get_$1(self):
	return self.__$1
$0
endsnippet

#argv handling
snippet argvp "parse argv"
${1:argvList} = sys.argv
${2:progName} = $1.pop(0)
while $1:
	${3:argument} = $1.pop(0)
	if (re.search(r'^--?h', $3)):
		print("help")$0
	elif (re.search(r'^(--?|\+)(\w+)', $3)):
		if ($1 and re.search(r'^(\w[\w-]+)', $1[0])):
			print("%s %s %s" % ( "opt-val", $3, $1.pop(0)))
		else:
			print("%s %s" % ( "opt", $3))
	else:
		print("%s %s" % ( "val", $3))
endsnippet
snippet defargv "function for process argv"
endsnippet
snippet defusage "function for showing usage"
endsnippet

#sample code
snippet path "get path"
import os
os.getcwd()
endsnippet
snippet rec "regex compile"
${1:myre} = re.compile(r'${2:(.*?):([^-]*)-(.*)}')
for ${3:line} in ${4:lines}:
	${5:mo} = $1.search($3)
	${6:field_1}, ${7:field_2}, ${8:field_3} = mo.groups()
endsnippet
snippet res "regex search"
re.search(r'${1:regex}', ${2:str} ${3:, flags=0})
endsnippet
