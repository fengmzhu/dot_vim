# ~/.vim/UltiSnips/systemverilog.snippets
priority 1
extends verilog
snippet clocking "clocking"
clocking ${1:module_name} @(${2:posedge} ${3:clk});
	$4
endclocking : $1
endsnippet

snippet intf "interface instantiate"
interface ${1:module_name}(input bit ${2:clk});
	${3:logic a};
	${4:modport mon (input a)};
endinterface : $1
endsnippet

snippet class "class"
class ${1:class_name};
	$0;
endclass: $1
endsnippet

snippet classe "class extends"
class ${1:class_name} extends ${2:parent};
	$0;
endclass: $1
endsnippet

snippet program "program"
program automatic ${1:test};
	${2:import uvm_pkg::*};

	initial begin
		$timeformat(-9, 1, "ns", 10);
		run_test();
	end
	$0
endprogram
endsnippet

snippet task "task"
task ${1:task_name}($2);
	\`uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);
	$3
endtask : $1
endsnippet

snippet vfunc "virtual function"
virtual function ${1:void} ${2:func_name}(${3:uvm_phase phase});
	${3:${VISUAL}}
endfunction : $2
endsnippet

snippet enum "enum"
enum {${1:READ}, ${2:WRITE}} ${3:trans};
endsnippet

snippet assert "assert"
assert(${1:txn.randomize()});
endsnippet

snippet typedefs "typedef sequencer"
typedef uvm_sequencer #($1_data) $1_sequencer;
endsnippet

snippet `inc "`include file"
\`include "${1:filename}.sv"
endsnippet

#UVM key template
#class
snippet uvcomp "uvm component"
class ${1:class_name} extends ${2:uvm_env};
	\`uvm_component_utils($1)

	function new(string name, uvm_component parent);
		super.new(name.parent);
	endfunction: new

	function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		$0
	endfunction : build_phase

	function run_phase(uvm_phase phase);
	endtask: run_phase
endclass: $1
endsnippet

#Instantiation
snippet uviagent "instantiate agent"
${1:host_agent}  ${2:h_agt};
//TODO:build phase
$2 = $1::type_id::create("$2", this);
uvm_config_db #(${3:ral_block_host_regmodel})::set(this, $2.get_name(), "regmodel", regmodel);
uvm_config_db #(uvm_object_wrapper)::set(this, {$2.get_name(), ".", "sqr.configure_phase"}, "default_sequence", ral_port_unlock_sequence::get_type());
$0
//TODO:connect phase
//regmodel.default_map.set_sequencer($2.sqr, adapter);
//$2.analysis_port.connect(hreg_predict.bus_in);
endsnippet
snippet uvisb "instantiate scoreboard"
${1:scoreboard}  ${2:sb};
//TODO:build phase
$2 = $1::type_id::create("$2", this);
//TODO:connect phase
${3:i_agt}.analysis_port.connect($2.before_export);
${4:o_agt}.analysis_port.connect($2.after_export);
$0
endsnippet

#Function
snippet uvph "uvm_phase"
virtual function void ${1:build_phase}(uvm_phase phase);
	super.$1(phase);
	$0\`uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);
endfunction: $1
endsnippet

snippet vfup "uvm_phase"
virtual function void ${1:build_phase}(uvm_phase phase);
	super.$1(phase);
	$0\`uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);
endfunction: $1
endsnippet

snippet uvlp "list all uvm phases"
//build connect end_of_elaboration run extract report final
//reset configure main shutdown (pre_* post_*)
endsnippet
snippet uvnew "constructor"
function new (string name, uvm_component parent);
	super.new(name, parent);
	$0\`uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);
endfunction: new
endsnippet

#UVM useful code
snippet uvtopo "show uvm topology (test.sv)"
virtual function void final_phase(uvm_phase phase);
	super.final_phase(phase);
	$0\`uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);

	if (uvm_report_enabled(UVM_DEBUG, UVM_INFO, "TOPOLOGY")) begin
		uvm_root::get().print_topology();
	end

	if (uvm_report_enabled(UVM_DEBUG, UVM_INFO, "FACTORY")) begin
		uvm_factory::get().print();
	end
endfunction: final_phase
endsnippet

snippet uvpt "uvm_root::get().print_topology();"
uvm_root::get().print_topology();
endsnippet


#TODO: where to put this code?
snippet uvsbro "raise objection for sb"
phase.raise_objection(this);
${1:env}.sb.wait_for_done();
phase.drop_objection(this);
endsnippet

#UVM example code
snippet uvstot "set_type_override_by_type"
set_type_override_by_type(${1:scoreboard}::get_type(),${2:ms_scoreboard}::get_type());
endsnippet

snippet uvsiot "set_inst_override_by_type"
set_inst_override_by_type("${1:env.agt}", "${1:agent}::get_type(),${2:new_agt}::get_type());
endsnippet

snippet uvcdbset "uvm_config_db set"
uvm_config_db#(${1:int})::set(this, "*", "${2:id}", id);
endsnippet

snippet uvcdbget "uvm_config_db get"
uvm_config_db#(${1:int})::get(this, "", "${2:id}", id);
endsnippet

snippet uvcdbgets "uvm_config_db set sequence"
uvm_config_db #(uvm_object_wrapper)::set(this, {${1:h_agt}.get_name(), ".", "${2:sqr.configure_phase}"}, "${3:default_sequence}", ${4:ral_port_unlock_sequence}::get_type());
endsnippet

snippet uvcreate "facotry create"
${1:sb} = ${2:scoreboard}::type_id::create("$1", this);
endsnippet

snippet `uvm_compub "uvm_component_utils_begin"
\`uvm_component_utils_begin(${1:iMonitor})
	\`uvm_field_int(${2:port_id}, UVM_ALL_ON | UVM_DEC)
\`uvm_component_utils_end
endsnippet

snippet `uvm_compu "uvm_component_utils"
\`uvm_component_utils(${1:test_base})
endsnippet

snippet `uvm_objub "uvm_object_utils_begin"
\`uvm_object_utils_begin(${1:packet})
	\`uvm_field_int(${2:sa}, UVM_ALL_ON | UVM_NOCOMPARE)
	\`uvm_field_int(${3:da}, UVM_ALL_ON)
	\`uvm_field_queue_int(${4:payload}, UVM_ALL_ON)
\`uvm_object_utils_end
endsnippet

snippet constr "constraint"
constraint ${1:valid} {
	${2:len > 0};
	${3:payload}.size inside {[1:10]};
}
endsnippet

snippet `uvi "uvm_info"
\`uvm_info("${1:TRACE}", ${2:$sformatf("%m")}, ${3:UVM_HIGH});
endsnippet

snippet `uvw "uvm_warning"
\`uvm_warning("${1:TRACE}", ${2:$sformatf("%m")});
endsnippet

snippet `uve "uvm_error"
\`uvm_error("${1:TRACE}", ${2:$sformatf("%m")});
endsnippet

snippet `uvf "uvm_fatal"
\`uvm_fatal("${1:TRACE}", ${2:$sformatf("%m")});
endsnippet

snippet uvlv "list UVM verbosity levels"
//(UVM_) DEBUG FULL HIGH LOW MEDIUM NONE
endsnippet

#UVM visual select
snippet ifuvre "if uvm_report_enabled(verbosity, severity, id)"
if (uvm_report_enabled(${1:UVM_MEDIUM}, ${2:UVM_INFO}, "${3:TOPOLOGY}")) begin
	${0:${VISUAL:#uvm_root::get().print_topology();}}
end
endsnippet
